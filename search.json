[{"title":"配置MySQL常见错误解决","url":"/mysql_configure.html","content":"\n\n# 前言\n按教程安装并配置MySQL的过程中遇到了五花八门的报错，感觉算是把能踩的坑都踩完了，写一篇博客记录一下常见的报错及其解决方案。\n使用zip安装文件进行配置，参考教程：[MySQL下载与安装](https://blog.csdn.net/weixin_42869365/article/details/83472466)\n\n# 报错\n\n## Install/Remove of the Service Denied!\n\n在输入`mysqld --install`后报错：`Install/Remove of the Service Denied!`\n\n**解决方法：**\n使用管理员权限运行cmd，并再次输入`mysqld --install`即可：\n![管理员权限运行cmd](https://raw.githubusercontent.com/GardenKitten/Picbed/main/blog_files/img/runcmd.png)\n\n---\n##  Access denied for user 'root'@'localhost'\n\n大部分教程中都会提到“mysql初始密码为空，所以第一次输密码时直接按回车即可”，但我在安装时却遇到了报错：\n![](https://raw.githubusercontent.com/GardenKitten/Picbed/main/blog_files/img/error03.png)\n\n**解决方法：**\n出现这种情况是因为在前面使用`mysqld --initialize --console`进行初始化时已经生成了初始密码。\n在控制台中找到`A temporary password is generated for root@localhost: `字段，后面即为初始密码：\n![](https://raw.githubusercontent.com/GardenKitten/Picbed/main/blog_files/img/passwd.png)\n再次执行`mysql -u root -p`后输入上述密码即可成功登录：\n![](https://raw.githubusercontent.com/GardenKitten/Picbed/main/blog_files/img/login.png)\n如果已经关闭了控制台，请在根目录下的data文件夹里找到后缀名为`err`的文件，打开并找到`A temporary password is generated for root@localhost: `字段，后面即为初始密码。\n\n[参考教程](https://blog.csdn.net/qq_42784277/article/details/106909880)\n\n---\n## failed to set datadir to XXX\n\n![](https://raw.githubusercontent.com/GardenKitten/Picbed/main/blog_files/img/error02.png)\n\n**解决方法：**\n输入`mysqld --initialize --user=mysql --console`\n随后输入`mysqld -install`\n如果出现`The service already exits!`的提示则输入`sc delete mysql`，并再次输入`mysqld -install`\n\n[参考教程](https://blog.csdn.net/hanhanwanghaha/article/details/105599321)\n\n---\n## 发生系统错误 2 系统找不到指定文件\n\n使用命令`net start mysql`后出现报错：\n```\n发生系统错误 2。 \n系统找不到指定文件。\n```\n\n**解决方法：**\n使用cmd在根目录的bin文件夹路径下按顺序输入：\n`mysqld --remove`→`mysqld --install`→`net start mysql`即可解决\n![](https://raw.githubusercontent.com/GardenKitten/Picbed/main/blog_files/img/succeed.png)\n\n[参考教程](https://blog.csdn.net/sunzixiao/article/details/125783977)\n\n---\n## MySQL 服务无法启动 服务没有报告任何错误\n\n使用命令`net start mysql`后并启动服务后出现报错：\n![](https://raw.githubusercontent.com/GardenKitten/Picbed/main/blog_files/img/error01.png)\n\n**解决方法：**\n使用命令`mysqld --console`查看错误信息，具体问题具体分析，我遇到的是前面的“failed to set datadir to XXX”错误。","tags":["MySQL"]},{"title":"构造无向图最小生成树(Prim算法)","url":"/mstree-prim.html","content":"\n# 写在前面\n参考了[【尚硅谷】数据结构与算法（Java数据结构与算法）](https://www.bilibili.com/video/BV1E4411H73v?t=1.2)\n以及[数据结构与算法基础（青岛大学-王卓）](https://www.bilibili.com/video/BV1nJ411V7bd?t=1.0)\n\n后者的算法思路讲解更加清晰，而前者的代码实现更加详细，最好两边都看一下加深理解。非常感谢这两位老师！\n算法思想在网上已经有非常多讲解了，在此就不再赘述，直接放代码。\n\n使用java进行实现，假设结点数据类型为char，边的权重数据类型为int，以0索引的顶点开始构造最小生成树\n代码文件一共有两个，分别是定义了MGraph对象的MGraph.java和作为主函数的PrimTest.java\n在MGraph类中的成员方法prim()实现了构造无向图最小生成树，并将最小生成树的每条边及其权重在控制台中输出。\n\n代码新手，如有不足还请海涵。\n\n# 作为例子的无向图\n![无向图](https://raw.githubusercontent.com/GardenKitten/Picbed/main/blog_files/img/mstree1.jpg)\n\n# 代码实现\n## MGraph.java\n```java\npublic class MGraph {\n    private int vertexNum;//结点数\n    private char[] vertexData;//结点数据\n    private int[][] weight;//边的权重\n    static final int INFINITE = Integer.MAX_VALUE;//将int最大值看作无穷大\n\n    public MGraph(int vertexNum, char[] vertexData, int[][] weight) {\n        this.vertexNum = vertexNum;\n        this.weight = weight;\n        this.vertexData = new char[vertexNum];//赋值前一定要先初始化\n\n        for (int i = 0; i < vertexNum; i++) {\n            this.vertexData[i] = vertexData[i];\n            for (int j = 0; j < vertexNum; j++) {\n                this.weight[i][j] = weight[i][j];\n            }\n        }\n    }\n\n    /**\n     * @param startVerx 开始构建最小生成树的顶点的下标\n     */\n    void prim(int startVerx) {\n        //记录结点是否已被收入最小生成树，默认初始值为false\n        boolean[] contains = new boolean[vertexNum];\n        //将开始顶点标记为已收入\n        contains[startVerx] = true;\n\n        //记录一条边的两个结点下标\n        //v1为已收入的结点，v2为未收入的结点\n        int v1 = -1, v2 = -1;\n        int minWeight = INFINITE;//初始化为“无限大”\n\n\n        //遍历一次找到一条符合条件的边\n        //最小生成树中有“顶点数-1”条边，所以从1开始遍历\n        for (int k = 1; k < vertexNum; k++) {\n            //遍历已被收入的边\n            for (int i = 0; i < vertexNum; i++) {\n                //遍历未被收入的边\n                for (int j = 0; j < vertexNum; j++) {\n                    //如果找到最小边，就修改minWeight的值并记录顶点\n                    //contains[i] && !contains[j]: 防止出现回路\n                    if (contains[i] && !contains[j] && weight[i][j] < minWeight) {\n                        minWeight = weight[i][j];\n                        v1 = i;\n                        v2 = j;\n                    }\n                }\n            }\n            //如果遍历了整个邻接矩阵仍未找到符合要求的边，说明该图不连通\n            //此时退出循环并报错\n            if (minWeight == INFINITE) {\n                System.out.println(\"该图不连通，无法构造最小生成树！\");\n                break;\n            }\n\n            //打印已找到的边\n            System.out.println(\"(\" + vertexData[v1] + \",\" + vertexData[v2] + \") \" + minWeight);\n            //重置minWeight\n            minWeight = INFINITE;\n            //将v2也收入到最小生成树中\n            contains[v2]=true;\n        }\n    }\n\n    //--getter and setter--\n\n    public int getVertexNum() {\n        return vertexNum;\n    }\n\n    public void setVertexNum(int vertexNum) {\n        this.vertexNum = vertexNum;\n    }\n\n    public char[] getVertexData() {\n        return vertexData;\n    }\n\n    public void setVertexData(char[] vertexData) {\n        for (int i = 0; i < vertexNum; i++) {\n            this.vertexData[i] = vertexData[i];\n        }\n    }\n\n    public int[][] getWeight() {\n        return weight;\n    }\n\n    public void setWeight(int[][] weight) {\n        for (int i = 0; i < vertexNum; i++)\n            for (int j = 0; j < vertexNum; j++)\n                this.weight[i][j] = weight[i][j];\n    }\n}\n\n```\n\n## PrimTest.java\n```java\npublic class PrimTest {\n    //将int最大值看作无穷大\n\n    public static void main(String[] args) {\n\n        char[] data = {'A', 'B', 'C', 'D', 'E', 'F'};\n        int[][] weight = new int[][]{\n                {0, 6, 1, 5, MGraph.INFINITE, MGraph.INFINITE},\n                {6, 0, 5, MGraph.INFINITE, 3, MGraph.INFINITE},\n                {1, 5, 0, 5, 6, 4},\n                {5, MGraph.INFINITE, 5, 0, MGraph.INFINITE, 2},\n                {MGraph.INFINITE, 3, 6, MGraph.INFINITE, 0, 6},\n                {MGraph.INFINITE, MGraph.INFINITE, 4, 2, 6, 0}\n        };\n\n        MGraph graph = new MGraph(data.length, data, weight);\n        graph.prim(0);\n    }\n}\n```\n\n# 运行结果\n>(A,C) 1\n>(C,F) 4\n>(F,D) 2\n>(C,B) 5\n>(B,E) 3\n\n# 构造的最小生成树\n![最小生成树](https://raw.githubusercontent.com/GardenKitten/Picbed/main/blog_files/img/mstrese2.jpg)","tags":["Java","数据结构"]},{"title":"Practice","url":"/practice.html","content":"\n# 这是一篇练习\n\n# 段落\nMarkdown is a **text-to-HTML** conversion tool initially written in Perl by *John Gruber* who released it back in 2004 under a BSD license.\n\nMarkdown is useful to writers who want to use a ***simpler-than-HTML*** markup language that later can be converted to HTML.\n\n# 引用\n> You can add Markdown formatting elements to a plaintext file using a text editor application. Or you can use one of the many Markdown applications for macOS, Windows, Linux, iOS, and Android operating systems. There are also several web-based applications specifically designed for writing in Markdown.\n>\n>Markdown is everywhere. Websites like Reddit and GitHub support Markdown, and lots of desktop and web-based applications support it.\n>>Markdown is platform independent. You can create Markdown-formatted text on any device running any operating system.\n\n# 列表\n- one\n- two \n- three\n\n1. one\n2. two\n3. three\n\n- one \n- two\n    text below the second list item\n- three\n\n# 代码\nthis is `code`\n\n\n    <html>\n     <p>这是由每行缩进四个空格创建的代码块</p>\n    </html>\n\n***\n\n```html\n<p>这是围栏式代码块</p>\n<p>可以在代码块上下都加上```或~~~来创建</p>\n```\n\n# 图片及链接\n[markdown链接语法](https://markdown.com.cn/basic-syntax/links.html \"markdown\")\n\n![这是我的纸片比格犬](../img/dante.png \"Dante\")\n\n[![dmc5](../img/logo_dmc5.png \"走过路过都来下个游戏\")](https://www.devilmaycry5.com/us/)\n\n\n# 字符转义\n\\\\转义字符desu\n\\*\n\\-\n\\_\n\n\n特殊字符自动转义\na&b\n4>3"},{"title":"Hello World","url":"/hello-world.html","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]